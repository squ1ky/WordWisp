// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WordWisp.API.Data;

#nullable disable

namespace WordWisp.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("dictionaries", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("definition");

                    b.Property<int>("DictionaryId")
                        .HasColumnType("integer")
                        .HasColumnName("dictionary_id");

                    b.Property<string>("Example")
                        .HasColumnType("text")
                        .HasColumnName("example");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("term");

                    b.Property<string>("Transcription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("transcription");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("words", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ExerciseType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exercise_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("max_attempts");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(70)
                        .HasColumnName("passing_score");

                    b.Property<int>("TimeLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("time_limit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TopicId");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.ExerciseAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("answer_image_path");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("answer_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("exercise_answers", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.ExerciseQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("points");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("question");

                    b.Property<string>("QuestionAudioPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("question_audio_path");

                    b.Property<string>("QuestionImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("question_image_path");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("exercise_questions", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("external_url");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MaterialType")
                        .HasColumnType("integer")
                        .HasColumnName("material_type");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_file_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("materials", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int?>("DeterminedLevel")
                        .HasColumnType("integer")
                        .HasColumnName("determined_level");

                    b.Property<int?>("GrammarScore")
                        .HasColumnType("integer")
                        .HasColumnName("grammar_score");

                    b.Property<int?>("ReadingScore")
                        .HasColumnType("integer")
                        .HasColumnName("reading_score");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit_minutes");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("total_questions");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer")
                        .HasColumnName("total_score");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("VocabularyScore")
                        .HasColumnType("integer")
                        .HasColumnName("vocabulary_score");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("level_tests", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at");

                    b.Property<int>("EstimatedUserLevel")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_user_level");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("LevelTestId")
                        .HasColumnType("integer")
                        .HasColumnName("level_test_id");

                    b.Property<int>("QuestionDifficulty")
                        .HasColumnType("integer")
                        .HasColumnName("question_difficulty");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("question_order");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("selected_answer");

                    b.HasKey("Id");

                    b.HasIndex("LevelTestId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("LevelTestId", "QuestionId")
                        .IsUnique();

                    b.HasIndex("LevelTestId", "QuestionOrder");

                    b.ToTable("level_test_answers", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_a");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_b");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_c");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_d");

                    b.Property<int>("OrderInSection")
                        .HasColumnType("integer")
                        .HasColumnName("order_in_section");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("question_text");

                    b.Property<int?>("ReadingPassageId")
                        .HasColumnType("integer")
                        .HasColumnName("reading_passage_id");

                    b.Property<int>("Section")
                        .HasColumnType("integer")
                        .HasColumnName("section");

                    b.HasKey("Id");

                    b.HasIndex("ReadingPassageId");

                    b.HasIndex("Section");

                    b.HasIndex("Section", "IsActive");

                    b.ToTable("level_test_questions", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.ReadingPassage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EstimatedReadingTime")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_reading_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("topic");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer")
                        .HasColumnName("word_count");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("Level", "IsActive");

                    b.ToTable("reading_passages", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("text")
                        .HasColumnName("email_verification_code");

                    b.Property<DateTime?>("EmailVerificationCodeExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verification_code_expiry");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.UserExerciseAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("answer_text");

                    b.Property<DateTime>("AnsweredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<decimal>("PointsEarned")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("points_earned");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int?>("SelectedAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_answer_id");

                    b.Property<int>("UserAttemptId")
                        .HasColumnType("integer")
                        .HasColumnName("user_attempt_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedAnswerId");

                    b.HasIndex("UserAttemptId")
                        .HasDatabaseName("IX_UserExerciseAnswer_UserAttempt");

                    b.ToTable("user_exercise_answers", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.UserExerciseAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_passed");

                    b.Property<decimal>("MaxPossibleScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(100m)
                        .HasColumnName("max_possible_score");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("score");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("TimeSpentSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("time_spent_seconds");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("user_exercise_attempts", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Topic", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Word", b =>
                {
                    b.HasOne("WordWisp.API.Entities.Dictionary", "Dictionary")
                        .WithMany("Words")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Exercise", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.Material", "Material")
                        .WithMany("Exercises")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WordWisp.API.Entities.Topic", "Topic")
                        .WithMany("Exercises")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.ExerciseAnswer", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.ExerciseQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.ExerciseQuestion", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("Questions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Material", b =>
                {
                    b.HasOne("WordWisp.API.Entities.Topic", "Topic")
                        .WithMany("Materials")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.UserExerciseAnswer", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.ExerciseQuestion", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WordWisp.API.Models.Entities.ExerciseAnswer", null)
                        .WithMany()
                        .HasForeignKey("SelectedAnswerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WordWisp.API.Models.Entities.UserExerciseAttempt", "UserAttempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserAttempt");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.UserExerciseAttempt", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("UserAttempts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordWisp.API.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestAnswer", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.LevelTest.LevelTest", "LevelTest")
                        .WithMany("Answers")
                        .HasForeignKey("LevelTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordWisp.API.Models.Entities.LevelTest.LevelTestQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LevelTest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestQuestion", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.LevelTest.ReadingPassage", "ReadingPassage")
                        .WithMany("Questions")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReadingPassage");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Topic", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Exercise", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAttempts");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.ExerciseQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.Material", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.UserExerciseAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTest", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.ReadingPassage", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
