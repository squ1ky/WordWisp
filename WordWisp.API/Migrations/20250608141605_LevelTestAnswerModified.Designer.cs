// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WordWisp.API.Data;

#nullable disable

namespace WordWisp.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250608141605_LevelTestAnswerModified")]
    partial class LevelTestAnswerModified
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("dictionaries", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("definition");

                    b.Property<int>("DictionaryId")
                        .HasColumnType("integer")
                        .HasColumnName("dictionary_id");

                    b.Property<string>("Example")
                        .HasColumnType("text")
                        .HasColumnName("example");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("term");

                    b.Property<string>("Transcription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("transcription");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("words", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int?>("DeterminedLevel")
                        .HasColumnType("integer")
                        .HasColumnName("determined_level");

                    b.Property<int?>("GrammarScore")
                        .HasColumnType("integer")
                        .HasColumnName("grammar_score");

                    b.Property<int?>("ReadingScore")
                        .HasColumnType("integer")
                        .HasColumnName("reading_score");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TimeLimitMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit_minutes");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("total_questions");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer")
                        .HasColumnName("total_score");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("VocabularyScore")
                        .HasColumnType("integer")
                        .HasColumnName("vocabulary_score");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("level_tests", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at");

                    b.Property<int>("EstimatedUserLevel")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_user_level");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("LevelTestId")
                        .HasColumnType("integer")
                        .HasColumnName("level_test_id");

                    b.Property<int>("QuestionDifficulty")
                        .HasColumnType("integer")
                        .HasColumnName("question_difficulty");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("question_order");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("selected_answer");

                    b.HasKey("Id");

                    b.HasIndex("LevelTestId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("LevelTestId", "QuestionId")
                        .IsUnique();

                    b.HasIndex("LevelTestId", "QuestionOrder");

                    b.ToTable("level_test_answers", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_a");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_b");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_c");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("option_d");

                    b.Property<int>("OrderInSection")
                        .HasColumnType("integer")
                        .HasColumnName("order_in_section");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("question_text");

                    b.Property<string>("ReadingPassage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reading_passage");

                    b.Property<int>("Section")
                        .HasColumnType("integer")
                        .HasColumnName("section");

                    b.HasKey("Id");

                    b.HasIndex("Section");

                    b.HasIndex("Section", "IsActive");

                    b.ToTable("level_test_questions", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("text")
                        .HasColumnName("email_verification_code");

                    b.Property<DateTime?>("EmailVerificationCodeExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verification_code_expiry");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Word", b =>
                {
                    b.HasOne("WordWisp.API.Entities.Dictionary", "Dictionary")
                        .WithMany("Words")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTestAnswer", b =>
                {
                    b.HasOne("WordWisp.API.Models.Entities.LevelTest.LevelTest", "LevelTest")
                        .WithMany("Answers")
                        .HasForeignKey("LevelTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordWisp.API.Models.Entities.LevelTest.LevelTestQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LevelTest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WordWisp.API.Entities.Dictionary", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordWisp.API.Models.Entities.LevelTest.LevelTest", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
