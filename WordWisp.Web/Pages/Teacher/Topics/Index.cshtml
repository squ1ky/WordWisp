@page "/teacher/topics"
@model TeacherTopicsIndexModel
@{
    ViewData["Title"] = "Мои топики";
}

@section Styles {
    <link rel="stylesheet" href="~/css/variables.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/base.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/topics.css" asp-append-version="true" />
}

<div class="container">
    <div class="page-header">
        <div class="header-content">
            <h1><i class="bi bi-mortarboard"></i> Мои топики</h1>
            <p class="text-muted">Управляйте своими учебными материалами</p>
        </div>
        <div class="header-actions">
            <a href="/teacher/topics/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Создать топик
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> @Model.ErrorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success">
            <i class="bi bi-check-circle"></i> @Model.SuccessMessage
        </div>
    }

    <!-- Поиск -->
    <div class="search-section">
        <form method="get" class="search-form">
            <div class="input-group">
                <input type="text" name="search" value="@Model.SearchQuery" class="form-control" placeholder="Поиск по названию или описанию..." />
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-search"></i> Поиск
                </button>
            </div>
            @if (!string.IsNullOrEmpty(Model.SearchQuery))
            {
                <a href="/teacher/topics" class="btn btn-outline-secondary btn-sm mt-2">
                    <i class="bi bi-x"></i> Очистить поиск
                </a>
            }
        </form>
    </div>

    <!-- Результаты -->
    @if (Model.PagedTopics.Topics.Any())
    {
        <div class="topics-grid">
            @foreach (var topic in Model.PagedTopics.Topics)
            {
                <div class="topic-card teacher-card">
                    <div class="topic-header">
                        <div>
                            <h3>@topic.Title</h3>
                            <div class="topic-meta">
                                <span class="date">
                                    <i class="bi bi-calendar"></i> @topic.CreatedAt.ToString("dd.MM.yyyy")
                                </span>
                            </div>
                        </div>
                        <div class="topic-status">
                            @if (topic.IsPublic)
                            {
                                <span class="badge badge-success">
                                    <i class="bi bi-globe"></i> Публичный
                                </span>
                            }
                            else
                            {
                                <span class="badge badge-secondary">
                                    <i class="bi bi-lock"></i> Приватный
                                </span>
                            }
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(topic.Description))
                    {
                        <div class="topic-description">
                            @topic.Description
                        </div>
                    }
                    
                    <div class="topic-stats">
                        <div class="stat">
                            <i class="bi bi-file-earmark-text"></i>
                            <span>@topic.MaterialsCount материалов</span>
                        </div>
                        <div class="stat">
                            <i class="bi bi-puzzle"></i>
                            <span>@topic.ExercisesCount упражнений</span>
                        </div>
                    </div>
                    
                    <div class="topic-actions">
                        <a href="/teacher/topics/@topic.Id" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-eye"></i> Просмотр
                        </a>
                        <a href="/teacher/topics/@topic.Id/edit" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-pencil"></i> Редактировать
                        </a>
                        <a href="/teacher/topics/@topic.Id/materials" class="btn btn-outline-info btn-sm">
                            <i class="bi bi-file-earmark-text"></i> Материалы
                        </a>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="confirmDelete(@topic.Id, '@topic.Title')">
                            <i class="bi bi-trash"></i> Удалить
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Пагинация -->
        @if (Model.PagedTopics.TotalPages > 1)
        {
            <nav class="pagination-nav">
                <ul class="pagination">
                    @if (Model.PagedTopics.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?search=@Model.SearchQuery&page=@(Model.CurrentPage - 1)">
                                <i class="bi bi-chevron-left"></i> Предыдущая
                            </a>
                        </li>
                    }

                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.PagedTopics.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?search=@Model.SearchQuery&page=@i">@i</a>
                        </li>
                    }

                    @if (Model.PagedTopics.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?search=@Model.SearchQuery&page=@(Model.CurrentPage + 1)">
                                Следующая <i class="bi bi-chevron-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-mortarboard"></i>
            </div>
            <h3>@(string.IsNullOrEmpty(Model.SearchQuery) ? "У вас пока нет топиков" : "Ничего не найдено")</h3>
            <p class="text-muted">
                @if (string.IsNullOrEmpty(Model.SearchQuery))
                {
                    <text>Создайте свой первый топик для начала работы</text>
                }
                else
                {
                    <text>Попробуйте изменить поисковый запрос</text>
                }
            </p>
            <div class="empty-actions">
                @if (string.IsNullOrEmpty(Model.SearchQuery))
                {
                    <a href="/teacher/topics/create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Создать первый топик
                    </a>
                }
                else
                {
                    <a href="/teacher/topics" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> Показать все топики
                    </a>
                }
            </div>
        </div>
    }
</div>

<!-- Модальное окно подтверждения удаления -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить топик <strong id="topicTitle"></strong>?</p>
                <p class="text-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    Это действие нельзя отменить. Все материалы и упражнения в этом топике также будут удалены.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash"></i> Удалить
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let topicIdToDelete = null;

        function confirmDelete(topicId, topicTitle) {
            topicIdToDelete = topicId;
            document.getElementById('topicTitle').textContent = topicTitle;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (!topicIdToDelete) return;

            // ИСПОЛЬЗУЙТЕ токен из модели
            const token = '@Model.AuthToken';
            if (!token) {
                alert('Сессия истекла. Пожалуйста, войдите в систему заново.');
                window.location.href = '/auth/login';
                return;
            }

            try {
                const apiBaseUrl = "http://localhost:5118";
                const response = await fetch(`${apiBaseUrl}/api/topics/${topicIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    sessionStorage.setItem('successMessage', 'Топик успешно удален');
                    window.location.reload();
                } else if (response.status === 401) {
                    alert('Сессия истекла. Пожалуйста, войдите в систему заново.');
                    window.location.href = '/auth/login';
                } else {
                    let errorMessage = 'Ошибка при удалении топика';
                    try {
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            const errorData = await response.json();
                            errorMessage = errorData.message || errorMessage;
                        }
                    } catch (parseError) {
                        console.warn('Could not parse error response:', parseError);
                    }
                    alert(errorMessage);
                }
            } catch (error) {
                console.error('Delete error:', error);
                alert('Не удалось подключиться к серверу');
            }

            const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
            modal.hide();
        });

        // Показываем сообщение об успехе если есть
        window.addEventListener('load', function() {
            const successMessage = sessionStorage.getItem('successMessage');
            if (successMessage) {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show';
                alertDiv.innerHTML = `
                    <i class="bi bi-check-circle"></i> ${successMessage}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.page-header').nextSibling);
                sessionStorage.removeItem('successMessage');
            }
        });
    </script>
}
